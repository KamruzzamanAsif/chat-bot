import streamlit as st
import openai
import base64
import os
from datetime import datetime

# Page configuration
st.set_page_config(
    page_title="AI Tutor - Bangladesh",
    page_icon="ЁЯУЪ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for clean design
st.markdown("""
<style>
    #MainMenu, footer, header {visibility: hidden;}
    
    .stApp {
        background: linear-gradient(135deg, #2dd4bf 0%, #14b8a6 50%, #0d9488 100%);
        min-height: 100vh;
    }

    .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
        max-width: 1200px;
    }

    .main-container {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 20px;
        padding: 2rem;
        margin: 2rem auto;
        max-width: 800px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
    }

    .app-title {
        text-align: center;
        color: #0f766e;
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .app-subtitle {
        text-align: center;
        color: #14b8a6;
        font-size: 1.2rem;
        margin-bottom: 2rem;
    }

    .stButton > button {
        background: linear-gradient(135deg, #14b8a6, #0d9488);
        color: white;
        border: none;
        border-radius: 12px;
        padding: 0.75rem 2rem;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(20, 184, 166, 0.25);
    }

    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(20, 184, 166, 0.35);
    }

    @media (max-width: 768px) {
        .main-container {
            margin: 1rem;
            padding: 1rem;
        }

        .app-title {
            font-size: 2rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# OpenAI API Key
openai.api_key = st.secrets.get("OPENAI_API_KEY", "your-openai-api-key")

# Session state
if "messages" not in st.session_state:
    st.session_state.messages = []
if "uploaded_files" not in st.session_state:
    st.session_state.uploaded_files = []
if "selected_class" not in st.session_state:
    st.session_state.selected_class = "ржкрзНрж░ржержо рж╢рзНрж░рзЗржгрзА"
if "selected_subject" not in st.session_state:
    st.session_state.selected_subject = "ржмрж╛ржВрж▓рж╛"

# Sidebar selection
with st.sidebar:
    st.markdown("### ЁЯПл рж╢рзНрж░рзЗржгрзА ржУ ржмрж┐рж╖ржпрж╝ ржирж┐рж░рзНржмрж╛ржЪржи")
    st.session_state.selected_class = st.selectbox(
        "рж╢рзНрж░рзЗржгрзА ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        ["ржкрзНрж░ржержо рж╢рзНрж░рзЗржгрзА", "ржжрзНржмрж┐рждрзАржпрж╝ рж╢рзНрж░рзЗржгрзА", "рждрзГрждрзАржпрж╝ рж╢рзНрж░рзЗржгрзА", "ржЪрждрзБрж░рзНрже рж╢рзНрж░рзЗржгрзА", 
         "ржкржЮрзНржЪржо рж╢рзНрж░рзЗржгрзА", "рж╖рж╖рзНржа рж╢рзНрж░рзЗржгрзА", "рж╕ржкрзНрждржо рж╢рзНрж░рзЗржгрзА", "ржЕрж╖рзНржЯржо рж╢рзНрж░рзЗржгрзА", 
         "ржиржмржо рж╢рзНрж░рзЗржгрзА", "ржжрж╢ржо рж╢рзНрж░рзЗржгрзА"],
        index=0
    )

    st.session_state.selected_subject = st.selectbox(
        "ржмрж┐рж╖ржпрж╝ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        ["ржмрж╛ржВрж▓рж╛", "ржЗржВрж░рзЗржЬрж┐", "ржЧржгрж┐ржд", "ржмрж┐ржЬрзНржЮрж╛ржи", "рж╕рж╛ржорж╛ржЬрж┐ржХ ржмрж┐ржЬрзНржЮрж╛ржи", 
         "ржзрж░рзНржо ржУ ржирзИрждрж┐ржХ рж╢рж┐ржХрзНрж╖рж╛", "рж╢рж┐рж▓рзНржк ржУ рж╕ржВрж╕рзНржХрзГрждрж┐"],
        index=0
    )

# Encode image for API
def encode_image(image_file):
    return base64.b64encode(image_file.read()).decode('utf-8')

# Process file
def process_file(file):
    file_extension = os.path.splitext(file.name)[1].lower()
    if file_extension in ['.png', '.jpg', '.jpeg']:
        return {"type": "image", "content": encode_image(file)}
    else:
        return {"type": "text", "content": file.read().decode('utf-8', errors='ignore')}

# Main UI
with st.container():
    st.markdown('<div class="main-container">', unsafe_allow_html=True)
    st.markdown("""
    <div class="app-title">ЁЯФ░ AI рж╢рж┐ржХрзНрж╖ржХ</div>
    <div class="app-subtitle">ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ рж╕рзНржорж╛рж░рзНржЯ рж╢рж┐ржХрзНрж╖рж╛ рж╕рж╣рж╛ржпрж╝ржХ</div>
    """, unsafe_allow_html=True)

    st.markdown("### ЁЯТм ржХржерзЛржкржХржержи")

    # Display chat history
    with st.container():
        for message in st.session_state.messages:
            with st.chat_message(message["role"], avatar="ЁЯзСтАНЁЯОУ" if message["role"] == "user" else "ЁЯдЦ"):
                st.markdown(message["content"])

    # Chat input
    user_input = st.chat_input("ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи ржПржЦрж╛ржирзЗ рж▓рж┐ржЦрзБржи... ЁЯТн")

    # File uploader below input
    st.markdown("#### ЁЯУО ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржи (ржЫржмрж┐ ржмрж╛ ржЯрзЗржХрзНрж╕ржЯ)")
    uploaded_file = st.file_uploader(
        "ржЖржкржирж╛рж░ ржлрж╛ржЗрж▓ ржжрж┐ржи (png, jpg, jpeg, txt, pdf)", 
        type=['png', 'jpg', 'jpeg', 'txt', 'pdf'], 
        accept_multiple_files=False,
        key="file_upload"
    )

    # Handle uploaded file
    if uploaded_file:
        file_data = process_file(uploaded_file)
        st.session_state.uploaded_files.append({
            "name": uploaded_file.name,
            "type": file_data["type"],
            "content": file_data["content"],
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })

        if file_data["type"] == "image":
            st.image(uploaded_file, caption=f"ЁЯУ╕ {uploaded_file.name}", use_container_width=True)
        else:
            with st.expander(f"ЁЯУД {uploaded_file.name} ржПрж░ ржмрж┐рж╖ржпрж╝ржмрж╕рзНрждрзБ"):
                st.text_area("", file_data["content"], height=200, disabled=True)

        st.success(f"тЬЕ {uploaded_file.name} рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкрж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ!")

    # Chat logic
    if user_input:
        st.session_state.messages.append({"role": "user", "content": user_input})

        system_message = f"""ржЖржкржирж┐ ржПржХржЬржи ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзА AI рж╢рж┐ржХрзНрж╖ржХред ржЖржкржирж┐ {st.session_state.selected_class} ржПрж░ {st.session_state.selected_subject} ржмрж┐рж╖ржпрж╝рзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░ржЫрзЗржиред 
        ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи ржПржмржВ рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзАржжрзЗрж░ ржмрзЛржЭрж╛рж░ ржЙржкржпрзЛржЧрзА ржХрж░рзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржиред 
        рж╕рзГржЬржирж╢рзАрж▓ ржПржмржВ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржкржжрзНржзрждрж┐рждрзЗ рж╢рзЗржЦрж╛ржиред"""

        messages = [{"role": "system", "content": system_message}]

        for file in st.session_state.uploaded_files:
            if file["type"] == "image":
                messages.append({
                    "role": "user",
                    "content": [
                        {"type": "text", "text": f"ржЖржкрж▓рзЛржб ржХрж░рж╛ ржЫржмрж┐: {file['name']}"},
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{file['content']}"}}
                    ]
                })
            else:
                messages.append({
                    "role": "user",
                    "content": f"ржЖржкрж▓рзЛржб ржХрж░рж╛ ржлрж╛ржЗрж▓ {file['name']} ржПрж░ ржмрж┐рж╖ржпрж╝ржмрж╕рзНрждрзБ: {file['content']}"
                })

        messages.extend(st.session_state.messages)

        try:
            with st.spinner("AI рж╢рж┐ржХрзНрж╖ржХ ржЪрж┐ржирзНрждрж╛ ржХрж░ржЫрзЗржи... ЁЯдФ"):
                response = openai.ChatCompletion.create(
                    model="gpt-4o",
                    messages=messages,
                    max_tokens=1000,
                    temperature=0.7
                )
                assistant_response = response.choices[0].message.content
        except Exception as e:
            assistant_response = f"ржжрзБржГржЦрж┐ржд, ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}"

        st.session_state.messages.append({"role": "assistant", "content": assistant_response})
        st.rerun()

    # Action buttons
    col1, col2, col3 = st.columns([1, 1, 1])

    with col1:
        if st.button("ЁЯЧСя╕П ржХржерзЛржкржХржержи ржорзБржЫрзБржи"):
            st.session_state.messages = []
            st.session_state.uploaded_files = []
            st.success("ржХржерзЛржкржХржержи ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")
            st.rerun()

    with col2:
        if st.button("ЁЯУЪ ржирждрзБржи ржкрзНрж░рж╕ржЩрзНржЧ"):
            st.session_state.uploaded_files = []
            st.success("ржирждрзБржи ржкрзНрж░рж╕ржЩрзНржЧ рж╢рзБрж░рзБ рж╣ржпрж╝рзЗржЫрзЗ!")

    with col3:
        if st.button("тД╣я╕П рж╕рж╛рж╣рж╛ржпрзНржп"):
            st.info("""
            **ржХрж┐ржнрж╛ржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи:**
            1. ржмрж╛ржо ржкрж╛рж╢ ржерзЗржХрзЗ рж╢рзНрж░рзЗржгрзА ржУ ржмрж┐рж╖ржпрж╝ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи
            2. ржкрзНрж░ржпрж╝рзЛржЬржирзЗ ржЫржмрж┐ ржмрж╛ ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рзБржи  
            3. ржкрзНрж░рж╢рзНржи рж▓рж┐ржЦрзБржи ржПржмржВ ржПржирзНржЯрж╛рж░ ржЪрж╛ржкрзБржи
            4. AI рж╢рж┐ржХрзНрж╖ржХ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░ржмрзЗржи!
            """)

    st.markdown('</div>', unsafe_allow_html=True)
